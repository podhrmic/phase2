import "eChronosComponentC.stg"
import "Common.stg"
import "CommonCPrototypes.stg"

////////////////////////////////////////////////////////////////////////////
//
// Declarations related to eChronos .prx file
//
////////////////////////////////////////////////////////////////////////////

filePurpose(sysInstanceName) ::= <<
This file contains the declarations required for the cross-component
RPC calls for eChronos.
>>

headerIfdef(sysInstanceName) ::= "__SMACCM_<sysInstanceName>_decls__H"

filePrefix(name, date, path) ::= <<
#ifndef <headerIfdef(name)>
#define <headerIfdef(name)>

<DARPALicenseComment()>

<filenameBlockComment(date, path, filePurpose(name))>

>>

filePostfix(name, path) ::= <<

/* endif for: #ifndef <headerIfdef(name)> */
#endif

<blockComment(arg={End of autogenerated file: <path>})>

>>

/*
dataWriterDecl(port) ::= <<
bool <incomingPortWriterName(port)>(<port.type.camkesInputType.name> arg);
>>
*/

writerDecl(port) ::= <<
<if(port.isIRQ)>
<else>
bool <incomingPortWriterName(port)><if(port.hasData)>(const <port.type.camkesInputType.name> arg);<else>();<endif>
<endif>
>>

/*
 * In CAmkES, we write to the output port.
 * In eChronos, we should write to the input port.
 * So, we only want the input ports.  We don't
 * even want the dispatchers.  However, for event
 * and event data ports, we need to know whether
 * the thread is active or passive so that we know
 * what can subsequently dispatch.
 */

activeThreadDecls(threadImpl) ::= <<
<threadImpl.inputPortList:writerDecl()>
>>
/*  <threadImpl.inputDataPortList:dataWriterDecl()>
<threadImpl.inputEventDataPortList:dataWriterDecl()>
<threadImpl.inputEventPortList:eventWriterDecl()>
<threadImpl.periodicDispatchers:periodicDispatcherDecl()> */

passiveThreadDecls(threadImpl) ::= <<
<threadImpl.dispatchers:userEntrypointCallerDecl()>
>>

headerBody(model) ::= <<

#include \<stdbool.h>
#include \<stddef.h>
#include \<stdint.h>
#include <\u003C><model.systemTypeHeaderName><\u003E>
#include <\u003C>rtos-kochab.h<\u003E>

// to initialize periodic dispatcher.  Call from main() before
// starting OS.

bool initialize_periodic_dispatcher();

   <model.activeThreadImplementations:activeThreadDecls()>
   <model.passiveThreadImplementations:passiveThreadDecls()>
>>
