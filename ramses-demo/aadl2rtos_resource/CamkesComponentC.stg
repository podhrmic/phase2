import "CommonComponentC.stg"

/*
 * Overrides for OS-specific names/behavior for generated C code.
 *
 */
// Import does not override earlier definitions!  Why?
// import "CamkesCNames.stg"

incomingPortWriterName(port) ::= "<port.name>_<port.type.writerFn>"

outgoingPortWriterName(connection) ::= <<
<connection.name>_<connection.sourcePort.type.writerFn>
>>

osSpecificThreadEntrypoint(threadImpl) ::= "int run(void)"
osSpecificThreadReturnStmt(threadImpl) ::= "return 0;"

incomingActiveThreadDispatchName(dispatcher) ::= "<dispatcher.qualifiedName>_<dispatcher.type.writerFn>"
outgoingActiveThreadDispatchName(dispatcher) ::= "<incomingActiveThreadDispatchName(dispatcher)>"

incomingUserEntrypointCallerName(dispatcher) ::= "<dispatcher.threadImplementation.componentDispatcherInterfaceVarIdName>_<dispatcher.idlDispatcherName>"

outgoingUserEntrypointCallerName(dispatcher) ::= "<dispatcher.passiveComponentDispatcherPathName>"

portLockStmt(port) ::= "<port.camkesMutexLockFnCall>;"

portUnlockStmt(port) ::= "<port.camkesMutexUnlockFnCall>; "

portDispatcherLock(dispatcher) ::= " "

portDispatcherUnlock(dispatcher) ::= " "

dispatcherMainInitializeLockStmt(threadImpl) ::= "<threadImpl.camkesDispatcherLockStmt>"

dispatcherMainLockWaitStmt(threadImpl) ::= "<threadImpl.camkesDispatcherLockStmt>"

dispatcherMainLockReleaseStmt(dispatcher) ::= "<dispatcher.threadImplementation.camkesDispatcherUnlockStmt>"

osSpecificIncludeFiles(threadImpl) ::= <<
#include <\u003C>string.h<\u003E>
#include <\u003C><threadImpl.componentCamkesHFileName><\u003E>
>>

osSpecificIrqDispatcher(dispatcher) ::= <<
void <incomingActiveThreadDispatchName(dispatcher)>() {
    <dispatcher.firstLevelInterruptHandler>();
    <dispatcher.dispatchOccurredVar> = true;
    <dispatcherMainLockReleaseStmt(dispatcher)>
    <dispatcher.name>_reg_callback(<incomingActiveThreadDispatchName(dispatcher)>, NULL);
}
>>

osSpecificRegisterIrqs(dispatcher) ::= << <if(dispatcher.isIRQ)><dispatcher.name>_reg_callback(<incomingActiveThreadDispatchName(dispatcher)>, NULL);
<endif> >>

osSpecificThreadPostInitializer(threadImpl) ::= <<
<threadImpl.dispatchers:osSpecificRegisterIrqs()>

// MWW to Pape: fill in the call to the initializer functions 
// for the mailbox functions HERE.

>>

// MWW to Pape: uncomment and fill in the code here for the mailbox implementation.
// componentRemoteWriterDecl(srcPort) ::= <<
// Mike was here, writing something for <srcPort.name>
// >>

// MWW to Pape: uncomment and fill in the code here for the mailbox implementation
// componentLocalReaderDecl(port) ::= <<
// Mike was here, writing something for <port.name>
//

osSpecificComponentLocalCallerFunction(connection) ::= <<
/************************************************************************
 * <outgoingPortWriterName(connection)>:
 * Invoked from user code in the local thread.
 *
 * This function is necessary to mimic a remote call by a passive
 * thread to a remote active thread, but redirects to the local
 * active thread.
 *
 ************************************************************************/

bool <outgoingPortWriterName(connection)>(const <connection.sourcePort.type.aadlInputType.name> <connection.sourcePort.name>) {
    return <incomingPortWriterName(connection.destPort)>(<connection.sourcePort.name>);
}
>>

osSpecificAssert(predicate) ::= "assert(<predicate>) "
