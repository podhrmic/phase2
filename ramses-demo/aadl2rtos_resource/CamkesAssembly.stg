import "Common.stg"

////////////////////////////////////////////////////////////////////////////
//
// Declarations for camkes assembly
//
////////////////////////////////////////////////////////////////////////////

camkesAssemblyPurpose(sysInstanceName) ::= <<
This file contains the main CAmkES assembly for the
AADL system instance rooted at <sysInstanceName>.
>>

filePrefix(name, date, path) ::= "<stdFilePrefix(date, path, camkesAssemblyPurpose(name))>"

filePostfix(name, path) ::= <<
>>

assemblyThreadImplementationImports(threadImpl) ::= <<
import "<threadImpl.rootToCamkesComponentFilePath>";

>>

assemblyThreadComponent(threadImpl) ::= <<
component <threadImpl.componentName> <threadImpl.componentInstanceName>;

>>

assemblyIrqComponent(dispatcher) ::= <<
component <dispatcher.irqComponent> <dispatcher.irqObject>;

>>


////////////////////////////////////////////////////////////////////////////
//
// Declarations for IRQ components
//
////////////////////////////////////////////////////////////////////////////


irqComponentMemoryRegion(memoryRegion) ::= <<
dataport <memoryRegion.regionTypeName> <memoryRegion.name>;

>>

constructIRQComponent(dispatcher) ::= <<
component <dispatcher.irqComponent> {
    hardware;
    <dispatcher.memoryRegions:irqComponentMemoryRegion()>
    emits DataAvailable irq;
}

>>

instantiateIRQComponent(dispatcher) ::= <<
component <dispatcher.irqComponent> <dispatcher.irqObject>;

>>

constructIRQConfig(dispatcher) ::= <<
<dispatcher.memoryRegions:{memoryRegion | <dispatcher.irqObject>.<memoryRegion.name>_attributes = "<memoryRegion.region>"; }>
<dispatcher.irqObject>.irq_attributes = <dispatcher.signalNumber> ;

>>

constructIRQMemoryConnection(memoryRegion, dispatcher) ::= <<
connection seL4HardwareMMIO <dispatcher.name>_<memoryRegion.name>(from <dispatcher.threadImplementation.componentInstanceName>.<memoryRegion.name>, to <dispatcher.irqObject>.<memoryRegion.name>);

>>

constructIRQSignal(dispatcher) ::= <<
connection seL4HardwareInterrupt <dispatcher.name>_irq(from <dispatcher.irqObject>.irq, to <dispatcher.threadImplementation.componentInstanceName>.<dispatcher.name>);

>>

constructIRQConnections(dispatcher) ::= <<
<dispatcher.memoryRegions:constructIRQMemoryConnection(dispatcher)>
<constructIRQSignal(dispatcher)>

>>


////////////////////////////////////////////////////////////////////////////
//
// Declarations for periodic components
//
////////////////////////////////////////////////////////////////////////////

constructPeriodicComponent(calendar) ::= <<
<if(calendar.hasDispatchers)>
component <calendar.periodicDispatcherComponentName> <calendar.periodicDispatcherInstanceName>;
<endif>
>>

rpcConnection(cid, from1, from2, to1, to2) ::=
   "connection seL4RPCCall <cid> (from <from1>.<from2>, to <to1>.<to2>);"

rpcDataportConnection(cid, from1, from2, to1, to2) ::=
   "connection seL4RPCCallDataport <cid> (from <from1>.<from2>, to <to1>.<to2>);"

connectPassiveToActive(passiveThreadImpl, activeThreadImpl, model) ::= <<
<if(!activeThreadImpl.isExternal)>
<if(passiveThreadImpl.containsDispatchers)><\\>
<rpcDataportConnection(model.generateConnectionName,
    activeThreadImpl.componentInstanceName,
    passiveThreadImpl.interfaceInstanceName,
    passiveThreadImpl.componentInstanceName,
    passiveThreadImpl.componentDispatcherInterfaceVarIdName)>
<endif>
<endif>
>>

assemblyConnectActiveToPassiveThreads(threadImpl, model) ::= <<
<threadImpl.passiveThreadRegion:connectPassiveToActive(threadImpl, model)>
>>

connectActiveToDispatcher(connection, threadImpl, model) ::= <<
<rpcConnection(model.generateConnectionName,
    threadImpl.componentInstanceName,
    connection.name,
    connection.destPort.threadImplementation.componentInstanceName,
    connection.destPort.name)>

>>

// assemblyConnectActiveChildToActiveThreads(threadImpl, model)

assemblyConnectThreadToActiveThreads(threadImpl, model) ::= <<
<threadImpl.activeThreadConnectionList:connectActiveToDispatcher(threadImpl, model)>
>>

connectActivePeriodic(dispatcher, threadImpl, model) ::= <<
<if(dispatcher.isPeriodic)><\\>
<rpcConnection(model.generateConnectionName,
    model.threadCalendar.periodicDispatcherInstanceName,
    dispatcher.qualifiedName,
    threadImpl.componentInstanceName,
    dispatcher.qualifiedName)>
<endif>
>>

assemblyConnectPeriodic(threadImpl, model) ::= <<
<threadImpl.dispatchers:connectActivePeriodic(threadImpl, model)>
>>

///////////////////////////////////////////////////////////////////////////
//
// Updates for Mailboxes for Ground Vehicle.
//
// At issue: to set port connection rights for the mailboxes, we need to modify 
// the assembly configuration.  So, we could do this as a model transformation;     
// this would substantially simplify the emitters.  
//
// In this case, we would transform the dataports into shared memory ports.
// But this is o.k., we just need to synchronize the numbers.  
//
///////////////////////////////////////////////////////////////////////////
sdaConnection(cid, from1, from2, to1, to2) ::=
   "connection seL4SharedData <cid> (from <from1>.<from2>, to <to1>.<to2>);"

mailboxWriterToReader(connection) ::= <<
<sdaConnection(connection.name, 
	connection.sourcePort.threadImplementation.componentInstanceName,
	connection.name,
	connection.destPort.threadImplementation.componentInstanceName,
	connection.name)>
>>

mailboxWriterBufferConnection(connection) ::= <<
<sdaConnection(connection.fullyQualifiedName, 
	connection.sourcePort.threadImplementation.componentInstanceName,
	connection.sourcePort.qualifiedName,
	connection.destPort.threadImplementation.componentInstanceName,
	connection.name)>
>>

connectReaderWriter(connection, srcThreadImpl, model) ::= <<
<if(connection.sourcePort.isOutputData)><\\>
<if(model.camkesUseMailboxDataports)>
// Connect all of the defined reader dataports for mailboxes + the writer buffer.
<mailboxWriterToReader(connection)>
<mailboxWriterBufferConnection(connection)>
<else>
<rpcConnection(model.generateConnectionName,
    srcThreadImpl.componentInstanceName,
    connection.sourcePort.qualifiedName,
    connection.destPortThreadImplementation.componentInstanceName,
    connection.destPort.name)>
<endif>
<endif>
>>

configureReaderWriter(connection) ::= <<
<if(connection.sourcePort.isOutputData)><\\>
<if(model.camkesUseMailboxDataports)>
<connection.fullyQualifiedName>.to_access = "R";
<endif>
<endif>

>>

///////////////////////////////////////////////////////////////////////////
//
// End of Updates for Mailboxes for Ground Vehicle.
//
///////////////////////////////////////////////////////////////////////////

assemblyConnectReadersWriters(threadImpl, model) ::= <<
<threadImpl.isSrcOfConnectionList:connectReaderWriter(threadImpl, model)>
>>

assemblyConfigureReadersWriters(threadImpl) ::= <<
<threadImpl.isSrcOfConnectionList:configureReaderWriter()>
>>

connectRpg(endpointConnection, srcThreadImpl, model) ::= <<
<rpcConnection(model.generateConnectionName,
    srcThreadImpl.componentInstanceName,
    endpointConnection.requiresEndpoint.name,
    endpointConnection.providesThreadImplementation.componentInstanceName,
    endpointConnection.providesEndpoint.name)>
>>

assemblyConnectRpgs(threadImpl, model) ::= <<
<threadImpl.isRequiresOfConnectionList:connectRpg(threadImpl, model)>
>>

assemblyConnectAccessor(sharedDataAccessor, otherSda, model) ::= <<
<sdaConnection(model.generateConnectionName,
               sharedDataAccessor.owner.componentInstanceName,
               sharedDataAccessor.name,
               otherSda.owner.componentInstanceName,
               otherSda.name)>
>>

assemblyConnectSharedData(sharedData, model) ::= <<
<sharedData.nonChosenAccessList:assemblyConnectAccessor(sharedData.chosenAccess, model)>
>>

assemblySetPriorities(threadImpl) ::= <<
<if(!threadImpl.isExternal)>
<threadImpl.componentInstanceName>.priority = <threadImpl.priority>;
<endif>
>>

assemblySetStackSize(threadImpl) ::= <<
<if(!threadImpl.isExternal)>
<threadImpl.componentInstanceName>._control_stack_size = <threadImpl.osSpecificStackSize>;
<endif>
>>

assemblySetSchedulingContext(threadImpl) ::= <<
// MWW: todo: set scheduling contexts for interfaces for thread <threadImpl.componentInstanceName>.

>>

assemblySetTiming(threadImpl) ::= <<
<threadImpl.componentInstanceName>._period = <threadImpl.periodInMicroseconds>;
<threadImpl.componentInstanceName>._budget = <threadImpl.maxExecutionTimeInMicroseconds>;

>>

assemblyConnectTimeServices(threadImpl, model) ::= <<
<if(threadImpl.requiresTimeServices)><\\>
<if(model.externalTimerComponent)>
connection seL4TimeServer <threadImpl.timeServicesConnectionName>(from <threadImpl.componentInstanceName>.timer, to <model.camkesExternalTimerInterfacePath>);
<else>
connection seL4TimeServer <threadImpl.timeServicesConnectionName>(from <threadImpl.componentInstanceName>.timer, to time_server.the_timer);
<endif>
<endif>
>>

configActiveToPassiveDataportId(passiveThreadImpl, activeThreadImpl, model) ::= <<
<if(passiveThreadImpl.containsDispatchers)><\\>
<activeThreadImpl.componentInstanceName>.<passiveThreadImpl.componentInstanceName>_attributes = "<model.generateCamkesDataportRpcMinIndex>";
<endif>
>>

configActiveToPassiveRegionDataportId(threadImpl, model) ::= <<
<threadImpl.passiveThreadRegion:configActiveToPassiveDataportId(threadImpl, model)>

>>

configConnectTimeServices(threadImpl, model) ::= <<
<if(threadImpl.requiresTimeServices)>
<threadImpl.componentInstanceName>.timer_attributes = "<model.generateCamkesTimeServerThreadIndex>";
<threadImpl.componentInstanceName>.timer_global_endpoint = "<threadImpl.timeServicesConnectionName>";
<threadImpl.componentInstanceName>.timer_complete_global_endpoint = "<threadImpl.timeServicesConnectionName>";
<endif>
>>

camkesAssemblyBody(model) ::= <<

import \<std_connector.camkes>;

<if(model.threadCalendar.hasDispatchers)>
import "<model.threadCalendar.periodicDispatcherPathName>";
<if(!model.externalTimerComponent)>
<if(model.isQemuTarget)>
import \<TimeServerKZM/TimeServer.camkes>;
<elseif(model.isOdroidTarget)>
import \<TimeServerOdroid/TimeServer.camkes>;
<else>
// TODO: MWW: Add import for platform time server .camkes file HERE.  Only know ARM-QEMU and ODROID time server.
<endif>
<else>
// TODO: MWW: not sure what (if anything) needs to be imported for external timer component.
<endif>
<endif>


<model.threadImplementations:assemblyThreadImplementationImports()>
<model.irqDispatchers:constructIRQComponent()>
<\\>
connector seL4RPCCallDataport {
    from Procedure client template "seL4RPCCallDataport-from.template.c";
    to Procedure server template "seL4RPCCallDataport-to.template.c";
}

assembly {
    composition {
        <constructPeriodicComponent(model.threadCalendar)><\\>

        <if(model.threadCalendar.hasDispatchers && !model.externalTimerComponent)>
        <if(model.isQemuTarget)>
        component TimeServerKZM time_server;
        <elseif(model.isOdroidTarget)>
        component TimeServerOdroid time_server;
        <else>
        // MWW TODO: Fill in time server component HERE.  Need to determine time server for Intel platforms.
        <endif>
        <endif>


        <commentIf("IRQ-handling hardware components",
                   (model.irqDispatchers:assemblyIrqComponent()))><\\>

        <commentIf("Component instances for all AADL-defined threads",
                   (model.threadImplementations:assemblyThreadComponent()))><\\>

        <commentIf("Connections from active dispatchers to passive threads",
                   (model.activeThreadImplementations:assemblyConnectActiveToPassiveThreads(model)))><\\>

        <commentIf("Connections from active dispatcher send/receive to other active dispatcher send/receive",
                   (model.threadImplementations:assemblyConnectThreadToActiveThreads(model)))><\\>

        <if(model.threadCalendar.hasDispatchers)>
        // Periodic dispatcher connections
        <model.activeThreadImplementations:assemblyConnectPeriodic(model)>
        <if(!model.externalTimerComponent)>
        connection seL4TimeServer periodic_dispatch_timer(from <model.threadCalendar.periodicDispatcherInstanceName>.timer, to time_server.the_timer);
        connection seL4GlobalAsynchCallback echo_int(from time_server.timer_notification, to <model.threadCalendar.periodicDispatcherInstanceName>.timer_complete);
        <else>
        connection seL4TimeServer periodic_dispatch_timer(from <model.threadCalendar.periodicDispatcherInstanceName>.timer, to <model.camkesExternalTimerInterfacePath>);
        connection seL4GlobalAsynchCallback echo_int(from <model.camkesExternalTimerCompletePath>, to <model.threadCalendar.periodicDispatcherInstanceName>.timer_complete);
        <endif>
        <endif>


        <model.threadImplementations:assemblyConnectTimeServices(model)><\\>

        <commentIf("IRQ connections",
                   (model.irqDispatchers:constructIRQConnections()))><\\>

        <commentIf("Component read/write connections",
                   (model.threadImplementations:assemblyConnectReadersWriters(model)))><\\>

        <commentIf("Direct RPC connections",
                   (model.threadImplementations:assemblyConnectRpgs(model)))><\\>

        <commentIf("Shared memory connections",
                   (model.sharedData:assemblyConnectSharedData(model)))>
    }

    configuration {
        <if(model.threadCalendar.hasDispatchers)>
        <model.threadCalendar.periodicDispatcherInstanceName>.timer_attributes = "<model.generateCamkesTimeServerThreadIndex>";
        <model.threadCalendar.periodicDispatcherInstanceName>.timer_global_endpoint = "periodic_dispatcher_timer";
        <model.threadCalendar.periodicDispatcherInstanceName>.timer_complete_global_endpoint = "periodic_dispatcher_timer";
        <model.threadCalendar.periodicDispatcherInstanceName>.priority = 201;
        <endif>
        
        <commentIf("Component read/write connections (mailbox Configurations)",
                   (model.threadImplementations:assemblyConfigureReadersWriters()))><\\>
        
        <model.irqDispatchers:constructIRQConfig()>
        <model.threadImplementations:assemblySetPriorities()>
        <model.threadImplementations:assemblySetStackSize()>
        <if(model.useOSRealTimeExtensions)>
        <model.threadImplementations:assemblySetSchedulingContext()>
        <model.activeThreadImplementations:assemblySetTiming()>
        <endif>
        <model.threadImplementations:configConnectTimeServices(model)>
        <model.activeThreadImplementations:configActiveToPassiveRegionDataportId(model)>
    }
}

>>



//
// connections for IRQ dispatchers
// <model.irqDispatchers:constructIRQConnections()>

//     <model.irqDispatchers:constructIRQConfig()>
