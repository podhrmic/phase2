import "Common.stg"


////////////////////////////////////////////////////////////////////////////
//
// Declarations related to component CAmkES file
//
////////////////////////////////////////////////////////////////////////////

componentCamkesPurpose(componentName) ::= <<
This header file contains the CAmkES component definition for the
AADL thread implementation <componentName>.
>>

filePrefix(name, date, path) ::= "<stdFilePrefix(date, path, componentCamkesPurpose(name))>"

filePostfix(name, path) ::= <<
>>

importThreadIdl(threadImpl) ::= <<
import "../../interfaces/<threadImpl.idlFileName>";

>>

importReaderWriterIdl(type) ::= <<
import "../../interfaces/<type.readerWriterIdlFileName>";

>>

importSharedDataAccessorIdl(sharedDataAccessor) ::= <<
import "../../interfaces/<sharedDataAccessor.type.sharedDataIdlFileName>";

>>

importRpgIdl(remoteProcedureGroup) ::= <<
import "../../interfaces/<remoteProcedureGroup.idlName>";

>>

writeToPassiveReceiver(threadImpl) ::= <<
<if(threadImpl.isPassive)>
uses <threadImpl.idlName> <threadImpl.interfaceInstanceName>;
<endif>

>>

/*
createDataports(threadImpl, destPort) ::= <<
    dataport <destPort.dispatchStructTypeName> <threadImpl.name>_<destPort.qualifiedName>;
    <threadImpl.passiveDispatcherRegion:createDataports(threadImpl)>

>>
*/


constructSenderInterface(connection) ::= <<
uses <connection.destPort.type.readerWriterInterfaceName> <connection.name>;

>>


inputPortDecl(port) ::= <<
provides <port.type.readerWriterInterfaceName> <port.name>;
has mutex <port.mutex>;


>>

///////////////////////////////////////////////////////////////////////////
//
// Updates for Mailboxes for Ground Vehicle.
//
///////////////////////////////////////////////////////////////////////////

createReaderDataport(connection) ::= <<
dataport int <connection.name>;
>>

createWriterDataport(port) ::= <<
dataport <port.mailboxStructTypeName> <port.qualifiedName>;
>>

inputDataPortDecl(port) ::= <<
<if(port.threadImplementation.model.camkesUseMailboxDataports)>
// Check one writer to this port.  We can do that by checking
// the size of the connection list.  It should be size 1.
// If so, we will access the port writer (which will be the only element
// in the list).  Then we will also add a dataport for ourselves.
<createReaderDataport(port.singletonConnection)>
<createWriterDataport(port.singletonConnection.sourcePort)>
<else>
<inputPortDecl(port)>
<endif>
>>

outputDataPortDecl(port) ::= <<
<if(port.threadImplementation.model.camkesUseMailboxDataports)>
<createWriterDataport(port)>
<port.connections:createReaderDataport()>
<else>
uses <port.type.readerWriterInterfaceName> <port.qualifiedName>;
<endif>
>>

///////////////////////////////////////////////////////////////////////////
//
// End of Updates for Mailboxes for Ground Vehicle.
//
///////////////////////////////////////////////////////////////////////////

sharedDataAccessorDecl(sharedDataAccessor) ::= <<
dataport <sharedDataAccessor.type.name> <sharedDataAccessor.name>;

>>

constructMemoryInterface(memoryRegion, dispatcher) ::= <<
dataport <memoryRegion.regionTypeName> <memoryRegion.name>;

>>

writeProvidedInterface(dispatcher) ::= <<
<if(dispatcher.isPeriodic)><\\>
provides <dispatcher.type.readerWriterInterfaceName> <dispatcher.qualifiedName>;
<elseif(dispatcher.isIRQ)><\\>
consumes DataAvailable <dispatcher.name>;
<dispatcher.memoryRegions:constructMemoryInterface(dispatcher)>
<endif>

>>

writeRpgInterface(endpoint) ::= <<
<endpoint.providesOrRequires> <endpoint.remoteProcedureGroup.name> <endpoint.name>;

>>

componentCamkesBody(threadImpl) ::= <<

import "../../interfaces/<threadImpl.idlFileName>";
<if(threadImpl.requiresTimeServices)>
import \<Timer.idl4>;
<endif>


<commentIf("Idl files for ports",
           (threadImpl.threadPortTypes:importReaderWriterIdl()))><\\>

<commentIf("Idl files for shared data accessors",
            (threadImpl.sharedDataAccessorList:importSharedDataAccessorIdl()))><\\>

<commentIf("Idl files for RPCs",
           (threadImpl.usedRpgs:importRpgIdl()))><\\>

<if(threadImpl.isActive)>
<commentIf("Passive component dispatch interfaces",
           (threadImpl.model.passiveThreadImplementations:importThreadIdl()))>
<endif>

component <threadImpl.componentName> {
    include "<threadImpl.model.systemTypeHeaderName>";
    <if(threadImpl.isActive)>
    control;
    <endif>

    <commentIf("Connection to active thread 'send' interfaces",
               (threadImpl.activeThreadConnectionList:constructSenderInterface()))><\\>

    <if(threadImpl.isActive)>
    has semaphore <threadImpl.dispatcherComponentSemaphoreName>;

    <commentIf("References to passive thread receivers",
               (threadImpl.passiveThreadRegion:writeToPassiveReceiver()))><\\>

    <commentIf("Provided interfaces for input event ports",
               (threadImpl.inputEventPortList:inputPortDecl()))><\\>
               
    <commentIf("Provided interfaces for input event data ports",
               (threadImpl.inputEventDataPortList:inputPortDecl()))><\\>

    <commentIf("Interfaces for Periodic and IRQ port dispatchers",
               (threadImpl.dispatchers:writeProvidedInterface()))><\\>

    <elseif(threadImpl.containsDispatchers)>
    provides <threadImpl.idlName> <threadImpl.componentDispatcherInterfaceVarIdName>;
    <endif>

    <threadImpl.externalSemaphores:{ sem | has semaphore <sem>; }; separator="\n">
    <threadImpl.externalMutexes:{mut | has mutex <mut>; }; separator="\n">
    <threadImpl.endpoints:writeRpgInterface()>

    <commentIf("Provided interfaces for input data ports",
               (threadImpl.inputDataPortList:inputDataPortDecl()))><\\>

    <commentIf("Provided interfaces for output data ports",
               (threadImpl.outputDataPortList:outputDataPortDecl()))><\\>

    <commentIf("Provided interfaces for shared data",
               (threadImpl.sharedDataAccessorList:sharedDataAccessorDecl()))><\\>

    <if(threadImpl.requiresTimeServices)>
    // For time services
    uses Timer timer;
    <endif>
}
>>
