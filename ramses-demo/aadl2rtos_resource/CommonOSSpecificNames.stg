/*********************************************************************
 * OS-specific naming functions required by C files:
 *   incomingPortWriterName
 *   outgoingPortWriterName
 *   incomingActiveThreadDispatchName
 *   outgoingActiveThreadDispatchName
 *   incomingUserEntrypointCallerName
 *   outgoingUserEntrypointCallerName
 *      portLockStmt
 *   portUnlockStmt
 *   portDispatcherLock
 *   portDispatcherUnlock
 *   dispatcherMainInitializeLockStmt
 *   dispatcherMainLockWaitStmt
 *   dispatcherMainLockReleaseStmt
 *   osSpecificIncludeFiles
 *   osSpecificIrqDispatcher
 *   osSpecificThreadInitializer
 *   osSpecificThreadEntrypoint
 *   osSpecificComponentLocalCallerFunction
 *   osSpecificAssert
 * This file just 'fails' for each of these calls.
>>

 */

genericFailure(template) ::=
<< INTERNAL ERROR: template: <template> not overridden for host OS. >>

incomingPortWriterName(port) ::= <<
<genericFailure("incomingPortWriterName")>
<port.incomingPortWriterNameDoesntExist>
>>

outgoingPortWriterName(connection) ::= <<
<genericFailure("outgoingPortWriterName")>
<connection.outgoingPortWriterNameDoesntExist>
>>

incomingActiveThreadDispatchName(dispatcher) ::= <<
<genericFailure("incomingActiveThreadDispatchName")>
<dispatcher.incomingActiveThreadDispatchNameDoesntExist>
>>

outgoingActiveThreadDispatchName(dispatcher) ::= <<
<genericFailure("outgoingActiveThreadDispatchName")>
<dispatcher.outgoingActiveThreadDispatchNameDoesntExist>
>>

incomingUserEntrypointCallerName(dispatcher) ::= <<
<genericFailure("incomingUserEntrypointCallerName")>
<dispatcher.incomingUserEntrypointCallerNameDoesntExist>
>>

outgoingUserEntrypointCallerName(dispatcher) ::= <<
<genericFailure("outgoingUserEntrypointCallerName")>
<dispatcher.outgoingUserEntrypointCallerNameDoesntExist>
>>

portDispatcherLock(dispatcher) ::= <<
<genericFailure("portDispatcherLock")>
<dispatcher.portDispatcherLockDoesntExist>
>>

portDispatcherUnlock(dispatcher) ::= <<
<genericFailure("portDispatcherUnlock")>
<dispatcher.portDispatcherUnlockDoesntExist>
>>

portLockStmt(port) ::= <<
<genericFailure("portLockStmt")>
<port.portLockStmtDoesntExist>
>>

portUnlockStmt(port) ::= <<
<genericFailure("portUnlockStmt")>
<port.portUnlockStmtDoesntExist>
>>

dispatcherMainInitializeLockStmt(threadImpl) ::= <<
<genericFailure("dispatcherMainInitializeLockStmt")>
<threadImpl.dispatcherMainInitializeLockStmtDoesntExist>
>>

dispatcherMainLockWaitStmt(threadImpl) ::= <<
<genericFailure("dispatcherMainLockWaitStmt")>
<threadImpl.dispatcherMainLockWaitStmtDoesntExist>
>>

dispatcherMainLockReleaseStmt(dispatcher, threadImpl) ::= <<
<genericFailure("dispatcherMainLockReleaseStmt")>
<threadImpl.dispatcherMainLockReleaseStmtDoesntExist>
>>

osSpecificThreadPostInitializer(threadImpl) ::= <<
<genericFailure("osSpecificThreadInitializer")>
<dispatcher.osSpecificIrqDispatcherDoesntExist>
>>

osSpecificRegisterIrqs(dispatcher) ::= <<
<genericFailure("osSpecificRegisterIrqs")>
<dispatcher.osSpecificRegisterIrqsDoesntExist>
>>

osSpecificIncludeFiles(threadImpl) ::= <<
<genericFailure("osSpecificIncludeFiles")>
<threadImpl.osSpecificIncludeFiles>
>>

osSpecificThreadEntrypoint(threadImpl) ::= <<
<genericFailure("osSpecificThreadEntrypoint")>
<threadImpl.osSpecificThreadEntrypoint>
>>

osSpecificComponentLocalCallerFunction(connection) ::= <<
<genericFailure("componentLocalCallerFunction")>
<connection.componentLocalCallerFunction>
>>

osSpecificAssert(predicate) ::= <<
<genericFailure("osSpecificAssert")>
<connection.osSpecificAssert>
>>
