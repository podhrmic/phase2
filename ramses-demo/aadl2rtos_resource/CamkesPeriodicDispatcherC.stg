import "CommonPeriodicDispatcherC.stg"

// Copied from "CamkesComponentC.stg"
incomingActiveThreadDispatchName(dispatcher) ::= "<dispatcher.qualifiedName>_<dispatcher.type.writerFn>"
outgoingActiveThreadDispatchName(dispatcher) ::= "<incomingActiveThreadDispatchName(dispatcher)>"

periodicComponentCBody(model, threadCalendar) ::= <<

#include <\u003C>string.h<\u003E>
#include <\u003C><model.systemTypeHeaderName><\u003E>
#include <\u003C><threadCalendar.periodicDispatcherHFileName><\u003E>


// prototypes for clock functions
void clock_init();
void clock_set_interval_in_ms(uint32_t interval);
void clock_start_timer(void);
void clock_irq_callback(void);
uint64_t clock_get_time();

<periodicComponentCDispatchers(threadCalendar)>

// no op under the new time server scheme.
void clock_init() { }

/* Set interrupt interval, in milliseconds. */
void clock_set_interval_in_ms(uint32_t interval)
{
    timer_periodic(0, ((uint64_t)interval)*NS_IN_MS);
}

// no op under the new time server scheme
void clock_start_timer(void) { }

// defer to time server
uint64_t clock_get_time()
{
    return (timer_time() / NS_IN_MS);
}

void timer_complete_callback() {
    smaccm_thread_calendar();
}

int run(void)
{
    clock_init();
    clock_set_interval_in_ms(<threadCalendar.greatestCommonDivisorInMilliseconds>);

    clock_start_timer();

    return 0;
}

>>
