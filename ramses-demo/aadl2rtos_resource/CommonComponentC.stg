import "Common.stg"
import "CommonOSSpecificNames.stg"
import "CommonCPrototypes.stg"

/*********************************************************************
 * OS-specific naming functions required by this file:
 *   incomingPortWriterName
 *   outgoingPortWriterName
 *   incomingActiveThreadDispatchName
 *   outgoingActiveThreadDispatchName
 *   incomingUserEntrypoingCallerName
 *   outgoingUserEntrypointCallerName
 *      portLockStmt
 *   portUnlockStmt
 *   portDispatcherLock
 *   portDispatcherUnlock
 *   dispatcherMainInitializeLockStmt
 *   dispatcherMainLockWaitStmt
 *   dispatcherMainLockReleaseStmt
 *   osSpecificIncludeFiles
 *   osSpecificIrqDispatcher
 *   osSpecificThreadInitializer
 *   osSpecificThreadEntrypoint
 *   osSpecificComponentLocalCallerFunction
 *   osSpecificAssert
 *
 * Dummy declarations are provided by CommonOSSpecificNames.
 * These must be overridden by redefinition (see CamkesComponentC.stg
 * for an example).  For more information on template overriding,
 * please see: www.stringtemplate.org.
 *********************************************************************/

////////////////////////////////////////////////////////////////////////////
//
// Declarations related to component gluecode C files for CAmkES/eChronos
//
//
////////////////////////////////////////////////////////////////////////////

componentGlueCodeCFilePurpose(name) ::= <<
This C file contains the implementations of the AADL primitives
used by user-level declarations for thread <name>.

The user code runs in terms of "dispatchers", which cause
dispatch user-level handlers to execute.  These handlers can
communicate using the standard AADL primitives, which are mapped
to C functions.

The send/receive handlers are not thread safe in CAmkES; it is
assumed that this is handled by the CAmkES sequentialized access
to the dispatch handler.  There is only one dispatch interface
for the component containing all of the dispatch points.

They are thread safe for eChronos.

The read/write handlers are thread safe because the writer comes
through a dispatch interface but the reader is "local" on a dispatch
interface and so contention may occur.
>>

filePrefix(name, date, path) ::=
    "<stdFilePrefix(date, path, componentGlueCodeCFilePurpose(name))>"

filePostfix(name, path) ::= <<
>>

/////////////////////////////////////////////////////////////////////
//
// Functions for managing send/receive queues for event data ports,
// used for active thread to active thread communications.
//
/////////////////////////////////////////////////////////////////////


copyToQueueDataStmt(port) ::= <<
<if(port.type.isBaseType)><port.queueDataName>[<port.queueFrontName>] = *<port.name> ;
<else><aadlInputToValMemcpy(port.type, {<port.queueDataName>[<port.queueFrontName>]}, port.name )>
<endif>
>>

copyFromQueueDataStmt(port) ::= <<
<if(port.type.isBaseType)><port.type.aadlOutputToVal><port.name> = <port.queueDataName>[<port.queueBackName>] ;
<else><valToAadlOutputMemcpy(port.type, port.name, {<port.queueDataName>[<port.queueBackName>]})>
<endif>
>>

InputEventDataPortDecls(port) ::= <<

/************************************************************************
 *
 * Static variables and queue management functions for port:
 *     <port.name>
 *
 ************************************************************************/

static <port.queueDataDecl>;
static <port.queueFullDecl> = false;
static <port.queueFrontDecl> = 0;
static <port.queueBackDecl> = 0;

bool <port.queueIsFullName>() {
    return (<port.queueFrontName> == <port.queueBackName>) && (<port.queueFullName>);
}

bool <port.queueIsEmptyName>() {
    return (<port.queueFrontName> == <port.queueBackName>) && (!<port.queueFullName>);
}

bool <port.queueReadName>(<port.type.aadlOutputType.name> <port.name>) {
    if (<port.queueIsEmptyName>()) {
        return false;
    } else {
        <copyFromQueueDataStmt(port)>
        <port.queueBackName> = (<port.queueBackName> + 1) % <port.queueSize>;
        <port.queueFullName> = false ;
        return true;
    }
}

bool <port.queueWriteName>(const <port.type.aadlInputType.name> <port.name>) {
    if (<port.queueIsFullName>()) {
        return false;
    } else {
        <copyToQueueDataStmt(port)>
        <port.queueFrontName> = (<port.queueFrontName> + 1) % <port.queueSize>;
        if (<port.queueBackName> == <port.queueFrontName>) {
            <port.queueFullName> = true ;
        }
        return true;
    }
}

/************************************************************************
 *  <incomingPortWriterName(port)>:
 * Invoked by: remote interface.
 *
 * This is the function invoked by a remote RPC to write to an active-thread
 * input event data port.  It queues the input message into a circular buffer.
 *
 ************************************************************************/

bool <incomingPortWriterName(port)>(const <port.type.camkesInputType.name> arg) {
    bool result;
    <portLockStmt(port)>
    result = <port.queueWriteName>(<port.type.camkesInputToAadlInput> arg);
    <portUnlockStmt(port)>
    <if(port.hasDispatcher)><dispatcherMainLockReleaseStmt(port)><endif>
    return result;
}


/************************************************************************
 *  <port.aadlReaderFnName>:
 * Invoked from local active thread.
 *
 * This is the function invoked by the active thread to read from the
 * input event data queue circular buffer.
 *
 ************************************************************************/

bool <port.aadlReaderFnName>(<port.type.aadlOutputType.name> arg) {
    bool result;
    <portLockStmt(port)>
    result = <port.queueReadName>(arg);
    <portUnlockStmt(port)>
    return result;
}

>>

/////////////////////////////////////////////////////////////////////
//
// Functions for managing send/receive queues for event ports,
// used for active thread to active thread communications.
//
// TODO: writer and reader functions have different format...why?
//
/////////////////////////////////////////////////////////////////////

InputEventPortDecls(port) ::= <<
static <port.indexType.name> <port.index> = 0;

bool <port.queueIsFullName>() {
    return false;
}

bool <port.queueIsEmptyName>() {
    return <port.index> == 0;
}

/************************************************************************
 *  <incomingPortWriterName(port)>:
 * Invoked by: remote RPC
 *
 * This is the function invoked by a remote RPC to write to an active-thread
 * input event port.  It increments a count of received messages.
 *
 ************************************************************************/

bool <incomingPortWriterName(port)>() {
    bool result;
    <portLockStmt(port)>
    // Note: possibility for overflow here - I have set (arbitrary) maximum.
    if (<port.index> <\u003C> <port.indexMax>) {
      result = true;
      <port.index>++;
    } else {
      result = false;
    }
    <portUnlockStmt(port)>
    <if(port.hasDispatcher)><dispatcherMainLockReleaseStmt(port)><endif>
    return true;
}

/************************************************************************
 *  <port.aadlReaderFnName>:
 * Invoked from local active thread.
 *
 * This is the function invoked by the active thread to decrement the
 * input event index.
 *
 ************************************************************************/

bool <port.aadlReaderFnName>() {
    bool result;
    <portLockStmt(port)>
    if (<port.index> > 0) {
        <port.index>--;
        result = true;
    } else {
        result = false;
    }
    <portUnlockStmt(port)>
    return result;
}

>>

optInputEventDataPortDecls(port) ::= <<
<if(port.threadImplementation.isActive ||
    !port.hasDispatcher)>

<InputEventDataPortDecls(port)>
<endif>
>>


optInputEventPortDecls(port) ::= <<
<if(port.threadImplementation.isActive || !port.hasDispatcher)>

<InputEventPortDecls(port)>
<endif>
>>


///////////////////////////////////////////////////////////////////////////
//
// Functions for managing Read/Write interfaces between active threads.
//
///////////////////////////////////////////////////////////////////////////

optConstCamkesInputArg(port) ::= "<if(port.hasData)>const <port.type.camkesInputType.name> <port.name><endif>"

componentRemoteWriteFunction(port) ::= <<

/************************************************************************
 *  <incomingPortWriterName(port)>:
 * Invoked by remote RPC.
 *
 * This is the function that is invoked by an RPC to write to a data port.
 *
 ************************************************************************/

bool <incomingPortWriterName(port)>(<optConstCamkesInputArg(port)>) {
    <portLockStmt(port)>
    <if(port.type.isBaseType)><port.readerWriterImplVar> = *<port.name>;
    <else><camkesInputToValMemcpy(port.type, port.readerWriterImplVar, port.name)>
    <endif>
    <portUnlockStmt(port)>
    return true;
}

>>

componentLocalReadFunction(port) ::= <<
/************************************************************************
 *  <port.aadlReaderFnName>:
 * Invoked from local active thread.
 *
 * This is the function invoked by the active thread to read from a data port.
 *
 ************************************************************************/

bool <port.aadlReaderFnName>(<userSendOptAadlOutputArg(port)>) {
    <portLockStmt(port)>
    <if(port.type.isBaseType)><port.type.aadlOutputToVal><port.name> = <port.readerWriterImplVar>;
    <else><valToAadlOutputMemcpy(port.type, port.name, port.readerWriterImplVar)>
    <endif>
    <portUnlockStmt(port)>
    return true;
}

>>


componentLocalReaderDecl(port) ::= <<
<port.readerWriterImplVarDecl>;

<componentLocalReadFunction(port)>
<componentRemoteWriteFunction(port)>
>>


componentRemoteCallerFunction(connection) ::= <<
/************************************************************************
 *  <connection.sourcePort.aadlWriterFnName>:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 ************************************************************************/

bool <connection.sourcePort.aadlWriterFnName>(const <connection.sourcePort.type.aadlInputType.name> <connection.sourcePort.name>) {
    return <outgoingPortWriterName(connection)>(<connection.sourcePort.name>);
}

>>

componentRemoteWriterDecl(srcPort) ::= <<
<srcPort.connections:componentRemoteCallerFunction()>
>>


/////////////////////////////////////////////////////////////////////
//
// UserEntrypointCaller functions
//
// These functions provide the "scaffolding" functions necessary to
// set up the output event ports prior to making a call to the user
// code.
//
// These are the implementations of the RPC functions for passive
// components that are called using CAmkES/eChronos.  They are also used
// in active components to set up local procedure calls to user code.
//
/////////////////////////////////////////////////////////////////////


userEntrypointCallerCall(externalHandler, dispatcher) ::= <<
<if(dispatcher.hasData)>
<externalHandler.handlerName>(<dispatcher.type.camkesInputToAadlInput> in_arg);
<else><externalHandler.handlerName>();
<endif>
>>

userEntrypointCallerAssignGlobals(dispatchContract, dispatcher) ::= <<
<dispatchContract.port.globalMaxDispatchSize> = <dispatchContract.maxDispatchSize>;
<if(dispatchContract.canDispatch)><\\>
<dispatchContract.port.globalIndex> = &(out_arg-><dispatchContract.port.index>);
<if(dispatchContract.port.hasData)><dispatchContract.port.globalData> = out_arg-><dispatchContract.port.data>;<endif>
*<dispatchContract.port.globalIndex> = 0;
<endif>
>>

userEntrypointCallerFn(dispatcher) ::= <<
/************************************************************************
 *  <incomingUserEntrypointCallerName(dispatcher)>:
 * Invoked by remote RPC (or, for active thread, local dispatcher).
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
<userEntrypointCallerPrototype(dispatcher)> {
    <portDispatcherLock(dispatcher)>
    <dispatcher.maxDispatchContracts.passiveContracts:userEntrypointCallerAssignGlobals(dispatcher)>
    <dispatcher.externalHandlers:userEntrypointCallerCall(dispatcher)>
    <portDispatcherUnlock(dispatcher)>
}


>>



/////////////////////////////////////////////////////////////////////
//
// userSendDefinition:
//
// These declarations construct the callback functions for user code
// in order to 'send' a message to other passive components.  In truth, they
// queue the message to be sent in local data; the actual 'send' is
// performed on the queued messages after the user code completes.
//
/////////////////////////////////////////////////////////////////////

userSendCopyAadlInputToGlobalStmt(port) ::= <<
<if(port.type.isBaseType)><\\>
<port.globalDataSlot> = *<port.name>;
<else><aadlInputToValMemcpy(port.type, port.globalDataSlot, port.name)>
<endif>
>>

userSendOptConstAadlInputArg(port) ::= "<if(port.hasData)>const <port.type.aadlInputType.name> <port.name><endif>"
userSendOptAadlOutputArg(port) ::= "<if(port.hasData)><port.type.aadlOutputType.name> <port.name><endif>"

connectionActiveSendDefinition(connection, port) ::= <<
<if(connection.destPort.threadImplementation.isActive)>
<if(port.hasData)>
result &= <outgoingPortWriterName(connection)>(<port.name>);
<else>
result &= <outgoingPortWriterName(connection)>();
<endif>
<endif>
>>

userSendDefinition(port) ::= <<
/************************************************************************
 * <port.aadlWriterFnName>
 * Invoked from local active or passive thread.
 *
 * This is the comm function invoked by a user-level thread to send a message
 * to another thread.  If the target is an active thread, it calls an
 * RPC on the target thread to queue the data.  If it is a passive thread,
 * it locally enqueues the request to be sent when the user thread
 * completes execution.
 *
 ************************************************************************/

bool <port.aadlWriterFnName>(<port:userSendOptConstAadlInputArg()>) {
    bool result = true;
    <port.connections:connectionActiveSendDefinition(port)>

<if(port.hasPassiveConnectionDestination)>
    if (<port.globalMaxDispatchSize> > 0 &&
         *<port.globalIndex> \< <port.globalMaxDispatchSize>) {
        <if(port.hasData)><userSendCopyAadlInputToGlobalStmt(port)><endif>
        (*<port.globalIndex>)++;
    } else {
        result = false;
    }
<endif>
    return result;
}

>>


/////////////////////////////////////////////////////////////////////
//
// aadlDispatcher declarations
//
// These declarations are used to construct the AADL event loop
// dispatcher for an AADL 'send' primitive.  They take as input the
// input to be 'sent'.  They define the queues to be used
// for any resulting messages to be transmitted based on the
// user code's response to the message.  To interface with the user
// code, they call the userEntrypointCaller function matching the
// 'send' interface.  Then they drain the queues of generated
// messages, calling an aadlDispatcher function for each message,
// which will repeat the process for the next 'send'...
//
/////////////////////////////////////////////////////////////////////


aadlDispatcherPassiveCallOutPortArg(port) ::= <<
<if(port.hasData)>& <port.data>,<endif>
        & <port.index> >>

aadlDispatcherPassiveCallOutArg(dispatchContract) ::= "<aadlDispatcherPassiveCallOutPortArg(dispatchContract.port)>"

aadlDispatcherWritePassiveArg(structName,port) ::= <<
<if(port.hasData)><port.type.valToAadlInput>(<structName>.<port.data>[smaccm_it])<endif>
>>

aadlDispatcherWriteActiveArg(structName,port) ::= <<
<if(port.hasData)>
(<port.type.valToCamkesInput>(<structName>.<port.data>[smaccm_it]))
<endif>
>>

activeThreadInternalDispatcherName(dispatcher) ::= <<
<dispatcher.activeThreadInternalDispatcherFnName>
>>

aadlDispatcherCallPassiveTarget(portDest,structName,portSrc) ::= <<
// Calling a passive dispatch target.
<activeThreadInternalDispatcherName(portDest)>(<aadlDispatcherWritePassiveArg(structName,portSrc)>);
>>

aadlDispatcherSendLoop(dispatchContract, structName) ::= <<
for (smaccm_it = 0; smaccm_it \< <structName>.<dispatchContract.port.index> && smaccm_it \< <dispatchContract.maxDispatchSize>; smaccm_it++) {
   <dispatchContract.passiveDispatchTargetList:aadlDispatcherCallPassiveTarget(structName, dispatchContract.port)>
}

>>



/////////////////////////////////////////////////////////////
// if the thread is *not* passive and it is a dispatcher,
// then it is the currently running active thread.  It
// might be better to pass in the threadImpl and do this
// comparison directly.
/////////////////////////////////////////////////////////////

aadlDispatcherFunctionName(dispatcher) ::= <<
<if(dispatcher.threadImplementation.isPassive)><\\>
<outgoingUserEntrypointCallerName(dispatcher)><\\>
<else><incomingUserEntrypointCallerName(dispatcher)><endif>
>>


aadlDispatcherFunctionArgs(dispatcher) ::= <<
<if(dispatcher.hasData)>
<dispatcher.type.aadlInputToCamkesInput><dispatcher.name>,
<endif>
&<dispatcher.dispatchStructArgName>
>>

aadlDispatcherFunction(dispatcher) ::= <<
/************************************************************************
 * <activeThreadInternalDispatcherName(dispatcher)>
 * Invoked from local active thread.
 *
 * This is the dispatcher function invoked to respond to an incoming thread
 * stimulus: an ISR, a periodic dispatch, or a queued event.
 *
 ******************************************************************************/
static <dispatcher.dispatchStructTypeName> <dispatcher.dispatchStructArgName>;

static void <activeThreadInternalDispatcherName(dispatcher)>(<if(dispatcher.hasData)><dispatcher.type.aadlInputType.name> <dispatcher.name><endif>) {
    // make the call:
    <aadlDispatcherFunctionName(dispatcher)>(
        <aadlDispatcherFunctionArgs(dispatcher)>
    );
<if(dispatcher.dispatchableContracts)>
    // call the aadl dispatchers for any generated output events.
    // to prevent misuse by malicious clients, we ensure that the number
    // of dispatches is less than the maximum allowed dispatch count.
    {
        uint32_t smaccm_it;
        <dispatcher.dispatchableContracts:aadlDispatcherSendLoop(dispatcher.dispatchStructArgName)>
    }
<endif>
}


>>

// For proper initializer that can call other functions:
    // need notion of 'dispatchable contracts' for thread.
    // the dispatcher function in this case is the initializer,
    // The dispatcher function args are from the dispatch contract.

aadlDispatcherFunctionPrototype(dispatcher) ::=  <<
static void <activeThreadInternalDispatcherName(dispatcher)>(<if(dispatcher.hasData)><dispatcher.type.aadlInputType.name> <dispatcher.name><endif>);

>>

///////////////////////////////////////////////////////////////////////////
//
// Periodic and IRQ dispatcher functions
//
///////////////////////////////////////////////////////////////////////////


dispatcherComponentPeriodicEventDecls(dispatcher) ::= <<

/************************************************************************
 * <dispatcher.name> Declarations
 *
 ************************************************************************/

static bool <dispatcher.dispatchOccurredVar>;
static <dispatcher.type.name> <dispatcher.periodicTimeVar>;

/************************************************************************
 * <incomingActiveThreadDispatchName(dispatcher)>
 * Invoked from remote periodic dispatch thread.
 *
 * This function records the current time and triggers the active thread
 * dispatch from a periodic event.  Note that the periodic dispatch
 * thread is the *only* thread that triggers a dispatch, so we do not
 * mutex lock the function.
 *
 ************************************************************************/

bool <incomingActiveThreadDispatchName(dispatcher)><\\>
(const <dispatcher.type.camkesInputType.name> arg) {
    <dispatcher.dispatchOccurredVar> = true;
    <dispatcher.periodicTimeVar> = <dispatcher.type.camkesInputToVal>arg;
    <dispatcherMainLockReleaseStmt(dispatcher)>
    return true;
}

>>

dispatcherComponentIRQEventDecls(dispatcher) ::= <<

static bool <dispatcher.dispatchOccurredVar>;

/************************************************************************
 * <incomingActiveThreadDispatchName(dispatcher)>
 * Invoked from IRQ: either 'managed' from CAmkES or 'raw' from eChronos.
 *
 * This function records an IRQ event, calls the first-level interrupt handler,
 * and triggers the thread to dispatch (which will invoke the second-level
 * interrupt handler).  Note that the ISR is the *only* thread that triggers
 * a dispatch, so we do not mutex lock the function.
 *
 ************************************************************************/
<osSpecificIrqDispatcher(dispatcher)>

>>

///////////////////////////////////////////////////////////////////////////
//
// declarations related to main function
//
///////////////////////////////////////////////////////////////////////////


periodicDispatcher(dispatcher) ::= <<
if (<dispatcher.dispatchOccurredVar>) {
    <dispatcher.dispatchOccurredVar> = false;
    <activeThreadInternalDispatcherName(dispatcher)>(&<dispatcher.periodicTimeVar>);
}

>>

// Previous code for irqDispatcher:
//    <activeThreadInternalDispatcherName(dispatcher)>();

irqDispatcher(dispatcher) ::= <<
if (<dispatcher.dispatchOccurredVar>) {
    <dispatcher.dispatchOccurredVar> = false;
    // dummy input to match the expectations of Tower.
    int64_t _dummy;
    <activeThreadInternalDispatcherName(dispatcher)>(&_dummy);
}

>>

eventDispatcher(dispatcher) ::= <<
while (<dispatcher.aadlReaderFnName>()) {
    <activeThreadInternalDispatcherName(dispatcher)>();
}

>>

eventDataDispatcher(dispatcher) ::= <<
while (!<dispatcher.isEmptyFnCall>) {
    <dispatcher.varDecl>;
    <dispatcher.aadlReaderFnName>(<dispatcher.type.valToAadlOutput><dispatcher.name>);
    <activeThreadInternalDispatcherName(dispatcher)>(<dispatcher.type.valToAadlInput><dispatcher.name>);
}

>>

drainDispatcher(dispatcher) ::= <<
<if(dispatcher.isPeriodic)><\\>
<dispatcher:periodicDispatcher()>
<elseif(dispatcher.isIRQ)><\\>
<dispatcher:irqDispatcher()>
<elseif(dispatcher.isInputEvent)><\\>
<dispatcher:eventDispatcher()>
<elseif(dispatcher.isInputEventData)>
<dispatcher:eventDataDispatcher()>
<elseif(dispatcher.isInitializer)>
<else>
    ERROR: dispatcher is not of periodic, IRQ, Event, or EventData type.
<endif>
>>


dispatcherComponentEventDecls(dispatcher) ::=  <<

<if(dispatcher.isPeriodic)><dispatcherComponentPeriodicEventDecls(dispatcher)>
<elseif(dispatcher.isIRQ)><dispatcherComponentIRQEventDecls(dispatcher)>
<else> <endif>
>>

portInitializer(port) ::= <<
<if(port.hasInitializeEntrypoint)><port.initializeEntrypointOpt.handlerName>();
<endif>
>>

dispatcherComponentMainFunction(threadImpl) ::= <<
/************************************************************************
 * <osSpecificThreadEntrypoint(threadImpl)>
 * Main active thread function.
 *
 ************************************************************************/

<osSpecificThreadEntrypoint(threadImpl)> {
    <commentIf("Port initialization routines",
               (threadImpl.portList:portInitializer()))><\\>

    <if(threadImpl.hasInitializeEntrypoint)>
    // thread initialization routines (if any)...
    int64_t dummy_time = 0;
    <activeThreadInternalDispatcherName(threadImpl.initializeEntrypointOpt)>(&dummy_time);
    <endif>

    <commentIf("Register interrupt handlers",
               (osSpecificThreadPostInitializer(threadImpl)))><\\>

    // Initial lock to await dispatch input.
    <dispatcherMainInitializeLockStmt(threadImpl)>
    for(;;) {
        <dispatcherMainLockWaitStmt(threadImpl)>

        // Drain the queues
        <threadImpl.dispatchersWithEntrypoints:drainDispatcher()>
    }

    // Won't ever get here, but form must be followed
    <osSpecificThreadReturnStmt(threadImpl)>
}
>>


///////////////////////////////////////////////////////////////////////////
//
// Variable declarations for dispatch ports.
//
///////////////////////////////////////////////////////////////////////////


portPassiveDispatchVarDeclarations(port) ::= <<
<if(port.hasData)>static <port.type.queueType.name> <port.globalData>; <endif>
static <port.indexType.aadlOutputType.name> <port.globalIndex>;
static <port.indexType.name> <port.globalMaxDispatchSize>;

>>

portDispatchVarDeclarations(port) ::= <<

<if(port.hasPassiveConnectionDestination)>
// Writing dispatch variables for port <port.name>
<portPassiveDispatchVarDeclarations(port)>
<else>
// NOT writing dispatch variables for port <port.name>
<endif>
>>

///////////////////////////////////////////////////////////////////////////
//
// Putting it all together...
//
///////////////////////////////////////////////////////////////////////////

componentCFileDecls(threadImpl) ::= <<

#include <\u0022><threadImpl.componentGlueCodeHFileName><\u0022>
<osSpecificIncludeFiles(threadImpl)>

<if(threadImpl.isActive)><\\>
///////////////////////////////////////////////////////////////////////////
//
// Local prototypes for AADL dispatchers
//
///////////////////////////////////////////////////////////////////////////
<threadImpl.dispatchers:aadlDispatcherFunctionPrototype()>
<threadImpl.passiveDispatcherRegion:aadlDispatcherFunctionPrototype()>
<endif>


<threadImpl.inputEventDataPortList:optInputEventDataPortDecls()>
<threadImpl.inputEventPortList:optInputEventPortDecls()>

<threadImpl.allOutputEventPorts:portDispatchVarDeclarations()>

<threadImpl.dispatchers:dispatcherComponentEventDecls()>
<threadImpl.dispatchers:userEntrypointCallerFn()>
<threadImpl.allOutputEventPorts:userSendDefinition()>
<threadImpl.inputDataPortList:componentLocalReaderDecl()>
<threadImpl.outputDataPortList:componentRemoteWriterDecl()>

<if(threadImpl.isActive)><\\>
<threadImpl.localActiveThreadConnectionFrontier:osSpecificComponentLocalCallerFunction()>
<threadImpl.dispatchers:aadlDispatcherFunction()>
<threadImpl.passiveDispatcherRegion:aadlDispatcherFunction()>
<if(threadImpl.isExternal)><\\>
////////////////////////////////////////////////////////////////////////////
//
// NOTE: External thread, so we assume the run function is externally declared.
//
////////////////////////////////////////////////////////////////////////////
<else>
<dispatcherComponentMainFunction(threadImpl)>
<endif>
<endif>

>>
